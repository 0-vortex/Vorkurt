{
    "pipes": [],
    "interfaces": [
        {
            "name": "DataTable",
            "id": "interface-DataTable-de3045945c9bb8a4e671d3c2b02a96c5",
            "file": "src/app/shared/utils/interfaces/data-table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DataTable {\n  athlete: string\n  age: number\n  country: string\n  sport: string\n  year: number\n  date: Date | String\n}\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "athlete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | String",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IAuthInfoResponse",
            "id": "interface-IAuthInfoResponse-2d6021655fcf22057d935f07e531cb56",
            "file": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAuthInfoUser {\n  email: string\n  password: string\n}\n\nexport interface IAuthInfoResponse {\n  uid: string,\n  email: string,\n  emailVerified: boolean,\n  isAnonymous: boolean,\n  lastLoginAt: string,\n  apiKey: string,\n  appName: string\n}\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "appName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isAnonymous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastLoginAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IAuthInfoUser",
            "id": "interface-IAuthInfoUser-2d6021655fcf22057d935f07e531cb56",
            "file": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAuthInfoUser {\n  email: string\n  password: string\n}\n\nexport interface IAuthInfoResponse {\n  uid: string,\n  email: string,\n  emailVerified: boolean,\n  isAnonymous: boolean,\n  lastLoginAt: string,\n  apiKey: string,\n  appName: string\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IOffsetPopUp",
            "id": "interface-IOffsetPopUp-988dbe1c6d0ce2907a89a4f04e5f11ea",
            "file": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nexport interface IOffsetPopUp {\n  offsetX: number,\n  offsetY: number\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopUpStateService {\n  private _statePopUpLogin: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false)\n  statePopUp$ = this._statePopUpLogin.asObservable()\n\n  private _coordinates: Subject<IOffsetPopUp> = new Subject<IOffsetPopUp>()\n  coordinates$ = this._coordinates.asObservable()\n\n  coordinates(value: IOffsetPopUp) {\n    this._coordinates.next(value)\n  }\n\n  statePopLogin(value: boolean) {\n    this._statePopUpLogin.next(value)\n  }\n}\n",
            "properties": [
                {
                    "name": "offsetX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "offsetY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-78aee791355a67bdfbd3eaa4a1eb9904",
            "file": "src/app/shared/utils/interfaces/user/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  uid?: string\n  displayName: string\n  email?: string\n  photoURL?: string\n}\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "photoURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b871ffca8d4aa272a7a5a0282cec1697",
            "file": "src/app/shared/utils/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "afAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "checkLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getDataFromFirebase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signInWithEmail",
                    "args": [
                        {
                            "name": "infoUser",
                            "type": "IAuthInfoUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "infoUser",
                            "type": "IAuthInfoUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "infoUser",
                            "type": "IAuthInfoUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "infoUser",
                            "type": "IAuthInfoUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, NgZone} from '@angular/core';\nimport {AngularFireAuth} from \"@angular/fire/compat/auth\";\nimport {UserService} from \"../user/user-service\";\nimport {Router} from \"@angular/router\";\nimport {User} from \"../../interfaces/user/user\";\nimport {IAuthInfoUser} from \"../../interfaces/auth/auth-info-user.types\";\nimport {throwError} from \"rxjs\";\nimport {SpinnerStateService} from \"../../../spinner/spinner-state.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  user: User | any\n\n  constructor(private ngZone: NgZone,\n              public afAuth: AngularFireAuth,\n              private _router: Router,\n              private _userService: UserService,\n              private _sppinerService: SpinnerStateService\n  ) {\n    this.checkLocalStorage()\n  }\n\n  getDataFromFirebase() {\n    this.afAuth.authState.subscribe(auth => {\n      if (auth) {\n        this.user = auth;\n        console.log('Authenticated');\n        this._userService.setUserLoggedIn(auth)\n      } else {\n        this._sppinerService.setStateBehaviorSpinner(false)\n        console.log('Not authenticated')\n      }\n    })\n\n  }\n\n  signInWithEmail(infoUser: IAuthInfoUser) {\n    return this.afAuth.signInWithEmailAndPassword(infoUser.email, infoUser.password)\n      .then((result) => {\n        this._userService.setUserLoggedIn(result)\n        this.ngZone.run(() => {\n          this._router.navigate(['/table'])\n          this._sppinerService.setStateBehaviorSpinner(true)\n        })\n      }).catch(err => {\n        this._router.navigate(['/auth/test'])\n        this._sppinerService.setStateBehaviorSpinner(false)\n        return err\n      })\n  }\n\n  signUp(infoUser: IAuthInfoUser) {\n    return this.afAuth.createUserWithEmailAndPassword(infoUser.email, infoUser.password).then(() => {\n      this._sppinerService.setStateBehaviorSpinner(false)\n\n    })\n      .catch(err => throwError(err))\n  }\n\n  logout() {\n    this._userService.clearLocalStorage()\n    this.afAuth.signOut().then(() => {\n      this._router.navigate(['/'])\n    })\n  }\n\n  private checkLocalStorage() {\n    if (!localStorage.getItem('user')) {\n      this.getDataFromFirebase()\n    } else {\n      console.log('localStorage ready')\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_sppinerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sppinerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConnectionService",
            "id": "injectable-ConnectionService-ee29d47fcc0dc6e4dbb59436bf41d9f0",
            "file": "src/app/shared/utils/services/firebase/connection.service.ts",
            "properties": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dbPath",
                    "defaultValue": "'/repository'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "repositoryRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFirestoreCollection<any>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "setUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {AngularFirestore, AngularFirestoreCollection} from \"@angular/fire/compat/firestore\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService {\n  private _data: string\n  private _dbPath = '/repository'\n  repositoryRef: AngularFirestoreCollection<any>\n\n  constructor(private db: AngularFirestore) {\n    this.repositoryRef = db.collection(this._dbPath)\n  }\n\n  get data() {\n    return this.repositoryRef\n  }\n\n  setUrl(url: string) {\n    this._dbPath = url\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DataTableService",
            "id": "injectable-DataTableService-6ee7a352c8acc6cf2ccc8e72cc57d443",
            "file": "src/app/shared/utils/services/data-table/data-table.service.ts",
            "properties": [
                {
                    "name": "_dataStoreBehavior",
                    "defaultValue": "new BehaviorSubject<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dataStore$",
                    "defaultValue": "this._dataStoreBehavior.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "dataStoreBehavior",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataTableService {\n\n  private _dataStoreBehavior: BehaviorSubject<any> = new BehaviorSubject<any>([])\n  dataStore$ = this._dataStoreBehavior.asObservable()\n\n  constructor(private _httpClient: HttpClient) {\n  }\n\n  dataStoreBehavior(data: string) {\n    return this._httpClient.get(data).subscribe(resp => {\n          this._dataStoreBehavior.next(resp)\n    })\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PopUpStateService",
            "id": "injectable-PopUpStateService-988dbe1c6d0ce2907a89a4f04e5f11ea",
            "file": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
            "properties": [
                {
                    "name": "_coordinates",
                    "defaultValue": "new Subject<IOffsetPopUp>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IOffsetPopUp>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_statePopUpLogin",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "coordinates$",
                    "defaultValue": "this._coordinates.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "statePopUp$",
                    "defaultValue": "this._statePopUpLogin.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "coordinates",
                    "args": [
                        {
                            "name": "value",
                            "type": "IOffsetPopUp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "IOffsetPopUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statePopLogin",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nexport interface IOffsetPopUp {\n  offsetX: number,\n  offsetY: number\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopUpStateService {\n  private _statePopUpLogin: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false)\n  statePopUp$ = this._statePopUpLogin.asObservable()\n\n  private _coordinates: Subject<IOffsetPopUp> = new Subject<IOffsetPopUp>()\n  coordinates$ = this._coordinates.asObservable()\n\n  coordinates(value: IOffsetPopUp) {\n    this._coordinates.next(value)\n  }\n\n  statePopLogin(value: boolean) {\n    this._statePopUpLogin.next(value)\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "SpinnerStateService",
            "id": "injectable-SpinnerStateService-5ef634fa7168acb2533d0a29312129a2",
            "file": "src/app/shared/spinner/spinner-state.service.ts",
            "properties": [
                {
                    "name": "_stateSpiner",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getState$",
                    "defaultValue": "this._stateSpiner.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "setStateBehaviorSpinner",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpinnerStateService {\n  private _stateSpiner : BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false)\n\n  constructor() {\n  }\n\n  getState$ = this._stateSpiner.asObservable()\n\n  setStateBehaviorSpinner(value: boolean){\n    this._stateSpiner.next(value)\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-1f4c9e795f1b3358e76c5c29f9364547",
            "file": "src/app/shared/utils/services/user/user-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setUserLoggedIn",
                    "args": [
                        {
                            "name": "user",
                            "type": "User | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {User} from \"../../interfaces/user/user\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor() {\n  }\n\n  setUserLoggedIn(user: User | any) {\n    localStorage.setItem('user', JSON.stringify(user))\n  }\n\n  getUserLoggedIn() {\n    if (localStorage.getItem('user')) {\n      return JSON.parse(<string>localStorage.getItem('user'))\n    } else {\n      console.log('local storage is empty')\n      return null\n    }\n  }\n\n  clearLocalStorage() {\n    localStorage.clear()\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuardGuard",
            "id": "injectable-AuthGuardGuard-565cef0ed9eae6983df8ade08d643da7",
            "file": "src/app/shared/utils/services/guards/auth-guard.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean | UrlTree>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {AngularFireAuth} from \"@angular/fire/compat/auth\";\nimport {UserService} from \"../user/user-service\";\nimport {SpinnerStateService} from \"../../../spinner/spinner-state.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardGuard implements CanActivate {\n\n  constructor(private _firebaseAuth: AngularFireAuth, private _sppinerService: SpinnerStateService\n    , private _userService: UserService, private _route: Router) {\n  }\n\n  async canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Promise<boolean | UrlTree> {\n    const user = await this._firebaseAuth.currentUser\n    let isAuthenticated = user ? true : false\n    const dataFromLocalStorage = this._userService.getUserLoggedIn()\n\n    if (dataFromLocalStorage) {\n      isAuthenticated = true\n      this._sppinerService.setStateBehaviorSpinner(false)\n    }\n\n    if (!isAuthenticated) {\n      alert('You must be authenticated in order to access this page.')\n\n      await this._route.navigate(['/auth/test'])\n      this._sppinerService.setStateBehaviorSpinner(false)\n    }\n    return isAuthenticated\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_firebaseAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_sppinerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_firebaseAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sppinerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "TableDataResolver",
            "id": "injectable-TableDataResolver-163376af1b458dec2f67defa9a41707f",
            "file": "src/app/shared/utils/services/resolvers/table/table-data.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {DataTableService} from \"../../data-table/data-table.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDataResolver implements Resolve<boolean> {\n\n  constructor(private _dataTableService: DataTableService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\n    return of(this._dataTableService.dataStoreBehavior('https://www.ag-grid.com/example-assets/olympic-winners.json'))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dataTableService",
                        "type": "DataTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_dataTableService",
                        "type": "DataTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "ElixDragDirective",
            "id": "directive-ElixDragDirective-c5f1253e89902154d5b7fd3b362206ce",
            "file": "src/app/shared/utils/directive/elix-drag.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, HostListener, Input, OnInit, Renderer2} from '@angular/core';\n\n@Directive({\n  selector: '[elixElixDrag]'\n})\nexport class ElixDragDirective implements OnInit{\n  @Input() defaultColor : string = 'transparent'\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {const self = this;\n\n    function preventSeePointerWhenResize() {\n      document.body.style.pointerEvents = 'none';\n    }\n\n    function setPointerAfterResize() {\n      document.body.style.pointerEvents = 'auto';\n    }\n\n\n    const newWidth = (wid: any) => {\n      const newWidth = Math.max(this.resizableMinWidth, wid);\n      _elementRef.nativeElement.style.width = (newWidth) + \"px\";\n    }\n\n\n    const mouseMoveG = (evt: any) => {\n      if (!this.dragging) {\n        return;\n      }\n      newWidth(evt.clientX + _elementRef.nativeElement.offsetLeft)\n      evt.stopPropagation();\n    };\n\n\n    const mouseUpG = (evt: any) => {\n      if (!this.dragging) {\n        return;\n      }\n      setPointerAfterResize();\n      this.dragging = false;\n      evt.stopPropagation();\n    };\n\n    const mouseDown = (evt: any) => {\n      if (this.inDragRegion(evt)) {\n        this.dragging = true;\n        preventSeePointerWhenResize();\n        evt.stopPropagation();\n      }\n    };\n\n\n    const mouseMove = (evt: any) => {\n      if (this.inDragRegion(evt) || this.dragging) {\n        _elementRef.nativeElement.style.cursor = \"col-resize\";\n      } else {\n        _elementRef.nativeElement.style.cursor = \"default\";\n      }\n    }\n\n\n    document.addEventListener('mousemove', mouseMoveG, true);\n    document.addEventListener('mouseup', mouseUpG, true);\n    _elementRef.nativeElement.addEventListener('mousedown', mouseDown, true);\n    _elementRef.nativeElement.addEventListener('mousemove', mouseMove, true);\n  }\n\n  @Input() resizableGrabWidth = 8;\n  @Input() resizableMinWidth = 10;\n\n  dragging = false;\n  ngOnInit(): void {\n  }\n\n  @HostListener('mousedown')\n  mouseDown(){\n    this._renderer.setStyle(this._elementRef.nativeElement, 'background-color', this.defaultColor)\n  }\n  @HostListener('mouseup')\n  mouseUp(){\n    this._renderer.setStyle(this._elementRef.nativeElement, 'background-color', 'transparent')\n  }\n  inDragRegion(evt: any): boolean {\n    return this._elementRef.nativeElement.clientWidth - evt.clientX + this._elementRef.nativeElement.offsetLeft < this.resizableGrabWidth;\n  }\n}\n",
            "selector": "[elixElixDrag]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "defaultColor",
                    "defaultValue": "'transparent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string"
                },
                {
                    "name": "resizableGrabWidth",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number"
                },
                {
                    "name": "resizableMinWidth",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mousedown",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "mouseup",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80
                }
            ],
            "propertiesClass": [
                {
                    "name": "dragging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "inDragRegion",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown'"
                        }
                    ]
                },
                {
                    "name": "mouseUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseup'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-59fd84bee9270fe88173a8bf8324cd04",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'vorkurt'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'vorkurt';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-5c0bb898a82ff7eaba63eba0501741db",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-auth",
            "styleUrls": [
                "./auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_regexEmail",
                    "defaultValue": "/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "feedback",
                    "defaultValue": "{password: false, email: false}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isSignedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "logedIn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSignIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {NgForm} from \"@angular/forms\";\nimport {AuthService} from \"../shared/utils/services\";\nimport {Router} from \"@angular/router\";\nimport {SpinnerStateService} from \"../shared/spinner/spinner-state.service\";\n\n@Component({\n  selector: 'elix-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n  isSignedIn = false\n  logedIn = true\n  feedback = {password: false, email: false}\n  private _regexEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  constructor(private _authService: AuthService, private router: Router, private _sppinerService: SpinnerStateService) {\n    this._sppinerService.setStateBehaviorSpinner(false)\n  }\n\n  ngOnInit(): void {\n    if (localStorage.getItem('user') !== null) {\n      this.isSignedIn = true\n    } else {\n      this.isSignedIn = false\n    }\n  }\n\n  onSubmit(form: NgForm) {\n    this.feedback.password = false\n    this.feedback.email = false\n    try {\n      if (this._regexEmail.test(String(\n        form.value.email).toLowerCase()) && String(form.value.password).length >= 6) {\n        this._sppinerService.setStateBehaviorSpinner(true)\n        if (this.logedIn) {\n          try {\n            this._authService.signInWithEmail(form.value).then((resp: any) => {\n              },\n              async (err: any) => {\n                try {\n\n                } catch (e) {\n                  return e\n                }\n              })\n          } catch (e) {\n            return e\n          }\n        } else {\n          this._sppinerService.setStateBehaviorSpinner(true)\n          this._authService.signUp(form.value).catch(e => {\n            return e\n          })\n        }\n        form.reset()\n      } else {\n        this.feedback.email = true\n        this.feedback.password = true\n\n      }\n    } catch (e) {\n      return e\n    }\n  }\n\n  changeSignIn() {\n    this.logedIn = !this.logedIn\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_sppinerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sppinerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex\">\n\n  <div class=\"flex flex-1 justify-end ml-20 pt-3\">\n    <h1 class=\"text-white text-9xl \">{{!logedIn ? 'Create' : 'Logged'}}</h1>\n  </div>\n  <div class=\"flex flex-1 justify-end\">\n    <button mat-ripple class=\"signUp bg-white hover:border-2 hover:bg-blue-100 rounded-md text-white pr-3 pl-3 pb-2 pt-2 text-blue-900 mt-3 mr-3\"\n            (click)=\"changeSignIn()\">{{logedIn ? 'Sign Up' : 'Sign In'}}</button>\n  </div>\n</div>\n<div class=\"flex justify-center items-center h-full\">\n  <div>\n    <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\">\n      <div class=\"flex-col mt-3 mb-8\">\n        <div>\n          <h1  class=\"text-white text-4xl elixir-username\">Username</h1>\n          <input type=\"email\" id=\"username\" ngModel name=\"email\" required>\n        </div>\n        <span *ngIf=\"feedback.email\" class=\"text-red-600 absolute my-1\"> * email is not valid</span>\n      </div>\n      <div class=\"flex-col mt-3 mb-8\">\n        <div>\n          <h1 class=\"text-white text-4xl\">Password</h1>\n          <input type=\"password\" id=\"password\" minlength=\"6\" ngModel name=\"password\" required>\n        </div>\n        <span *ngIf=\"feedback.password\" class=\"text-red-600 absolute my-1\"> * Password to short</span>\n      </div>\n      <div class=\"flex justify-end items-center mt-3\">\n        <button class=\"bg-blue-400 hover:border-2 hover:bg-blue-700 rounded-md text-white pr-3 pl-3 pb-2 pt-2\"\n                [disabled]=\"!authForm\"\n                type=\"submit\">\n          {{!logedIn ? 'Sign Up' : 'Sign In'}}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-617eae9d80f072a16f23156e8d20a7dc",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 709,
                            "end": 722,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 710,
                                "end": 718,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-723faadbb8a41bf44b58d1420ae971ec",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\nbody {\n  margin: 0;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-e940a936dd1ef743a0024b99a12b7c38-1",
            "file": "src/app/module/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-header",
            "styleUrls": [
                "./header.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "defaultValue": "'transparent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "\"light\" | \"dark\" | \"transparent\""
                },
                {
                    "name": "color",
                    "defaultValue": "'transparent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSayHello",
                    "defaultValue": "new EventEmitter<HTMLElement>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pointIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pointIcon'"
                        }
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "value1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeData",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retriveCoordinates",
                    "args": [
                        {
                            "name": "event",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {animate, state, style, transition, trigger} from \"@angular/animations\";\nimport {ConnectionService} from \"../../shared/utils/services/firebase/connection.service\";\nimport {catchError, map} from \"rxjs/operators\";\nimport {PopUpStateService} from \"./pop-up-login/pop-up-state.service\";\nimport {throwError} from \"rxjs\";\nimport {AuthService} from \"../../shared/utils/services\";\n\n@Component({\n  selector: 'elix-header',\n  templateUrl: './header.component.html',\n  animations: [\n    trigger('openClose', [\n      // ...\n      state('open', style({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', style({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: '#c6ecff'\n      })),\n      transition('open => closed', [\n        animate('1s')\n      ]),\n      transition('closed => open', [\n        animate('0.5s')\n      ]),\n    ]),\n  ],\n  styleUrls: ['./header.component.sass']\n})\nexport class HeaderComponent implements OnInit {\n  @Input()\n  inputValue = ''\n  value: any\n  value1: any\n  @Input() name: string\n  @Input() color = 'transparent'\n  @Output()\n  onSayHello = new EventEmitter<HTMLElement>()\n  @Input() background: 'light' | 'dark' | 'transparent' = 'transparent'\n  @ViewChild('pointIcon') pointIcon: ElementRef\n\n  constructor(private _firebaseTry: ConnectionService, private _popUpState: PopUpStateService,\n              ) {\n    this._firebaseTry.setUrl('/repository')\n  }\n\n  ngOnInit(): void {\n    this._firebaseTry.data.snapshotChanges()\n      .pipe(map(changeData => changeData\n        .map(c => {\n          let a = c.payload.doc.data();\n          return {\n            key: c.payload.doc.id, value:\n              a[Object.keys(a)[0]]\n          }\n        }))).subscribe(data => console.log(data))\n  }\n\n  resizeData(event: Event) {\n    this.inputValue = ' '\n  }\n\n  retriveCoordinates(event: HTMLElement) {\n    this.onSayHello.emit(event)\n    this._popUpState.statePopLogin(true)\n    this._popUpState.coordinates({\n      offsetX: this.pointIcon.nativeElement.offsetLeft,\n      offsetY: this.pointIcon.nativeElement.offsetTopx\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".iufce__icon\n  color: #cdd9e5\n  height: inherit\n  width: inherit\n\n.iufce__expand-input\n  width: 32.75rem\n  transition: all 0.5s ease-in-out\n\n.iufce__parrent-header\n  &.background\n    &-dark\n      background: #8F8F8F\n\n    &-transparent\n      background: transparent\n\n    &-light\n      background: #F6F6F6\n\n.colorIcon\n  &-dark\n    color: #D9E5FF\n\n  &-transparent\n    color: #92A2BD\n\n  &-light\n    color: #8F8F8F\n",
                    "styleUrl": "./header.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_firebaseTry",
                        "type": "ConnectionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_popUpState",
                        "type": "PopUpStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "_firebaseTry",
                        "type": "ConnectionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_popUpState",
                        "type": "PopUpStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"bg-primary-blue \" [ngClass]=\"'iufce__parrent-header background-' + background\">\n  <div elixElixDrag class=\"flex pl-8 justify-center items-center h-16\">\n    <div class=\"w-8 h-8 mr-4\" [routerLink]=\"['/table']\">\n      <mat-icon [svgIcon]=\"'fa_brands:github'\" class=\"iufce__icon \" [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n    </div>\n    <div class=\"flex flex-1 items-center\">\n      <input type=\"text\" class=\"w-73 h-7 text-black pl-3\"\n             [ngClass]=\"inputValue ? 'iufce__expand-input' :'' \"\n             (focus)=\"resizeData($event)\"\n             [(ngModel)]=\"inputValue\">\n      <div class=\"ml-2\">\n        <h1 class=\"text-white text-xs\" [routerLink]=\"['repository']\" [ngClass]=\"'colorIcon-'+color\">Pull request</h1>\n      </div>\n    </div>\n    <div class=\"flex pr-8\">\n      <div class=\"w-5 h-5\">\n        <mat-icon [svgIcon]=\"'fa_solid:bell'\" class=\"iufce__icon\" [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n      </div>\n      <div class=\"w-5 h-5 ml-2\">\n        <mat-icon [svgIcon]=\"'fa_solid:plus'\" class=\"iufce__icon\" [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n      </div>\n      <div class=\"w-5 h-5 ml-2\" #pointIcon>\n        <mat-icon\n                  (click)=\"retriveCoordinates(pointIcon)\"\n                  [svgIcon]=\"'fa_solid:user-circle'\"\n                  class=\"iufce__icon\"\n                  [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n      </div>\n    </div>\n  </div>\n  <elix-pop-up-login></elix-pop-up-login>\n</div>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-ed8b90d18000bd506168b1f0e74ee936",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PopUpLoginComponent",
            "id": "component-PopUpLoginComponent-9c71d0ed5cd39f5e714dd908affaeb39",
            "file": "src/app/module/header/pop-up-login/pop-up-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-pop-up-login",
            "styleUrls": [
                "./pop-up-login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pop-up-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "popUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'popUp'"
                        }
                    ]
                },
                {
                    "name": "popUpSettings",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport {PopUpStateService} from \"./pop-up-state.service\";\nimport {AuthService} from \"../../../shared/utils/services\";\nimport {UserService} from \"../../../shared/utils/services/user/user-service\";\nimport {SpinnerStateService} from \"../../../shared/spinner/spinner-state.service\";\n\n@Component({\n  selector: 'elix-pop-up-login',\n  templateUrl: './pop-up-login.component.html',\n  styleUrls: ['./pop-up-login.component.scss']\n})\nexport class PopUpLoginComponent implements OnInit {\n  @ViewChild('popUp') popUp: ElementRef<HTMLElement>\n  popUpSettings: boolean = false\n  dataUser: any\n\n  constructor(private _popState: PopUpStateService,\n              private _render: Renderer2,\n              private _authService: AuthService,\n              private _userService: UserService,\n              private _spinnerService: SpinnerStateService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this._popState.coordinates$\n      .subscribe(resp => {\n        if (JSON.stringify(resp) !== '{}') {\n          let a = this.popUp?.nativeElement.style\n          a ? a.left = `${resp.offsetX - this.popUp.nativeElement.offsetWidth / 2 - 70}px` : null\n          this._popState.statePopUp$.subscribe(resps => this.popUpSettings = resps)\n          this.dataUser = this._userService.getUserLoggedIn()\n        }\n      })\n  }\n\n  signOut() {\n    this._popState.statePopLogin(false)\n    this._spinnerService.setStateBehaviorSpinner(true)\n    this._authService.logout()\n    return 1\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".elix__border-color{\n  border-color: #1ea7fd;\n  box-shadow: 2px 1px 8px blue, -8px 0px 8px;\n  position: absolute;\n  z-index: 100000000;\n  height: min-content;\n}\n",
                    "styleUrl": "./pop-up-login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_popState",
                        "type": "PopUpStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_spinnerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_popState",
                        "type": "PopUpStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_spinnerService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div #popUp\n     class=\"\n border-2\n rounded-2xl text-white\n w-2/12 elix__border-color\n border-solid\n\"\n     *ngIf=\"popUpSettings\"\n>\n  <div\n  >\n    <div>\n      <h1 class=\"truncate\">{{dataUser.email || dataUser.user.email}} </h1>\n    </div>\n    <div class=\"flex justify-center\">\n      <button mat-flat-button (click)=\"signOut()\">Sign Out</button>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "RepositoryContainerComponent",
            "id": "component-RepositoryContainerComponent-21b076acf9365f8486b70c1460c94403",
            "file": "src/app/module/repository-container/repository-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "iufce-repository-container-component",
            "styleUrls": [
                "./repository-container-component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./repository-container-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name",
                    "defaultValue": "'Sami'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'iufce-repository-container-component',\n  templateUrl: './repository-container-component.html',\n  styleUrls: ['./repository-container-component.sass']\n})\nexport class RepositoryContainerComponent implements OnInit {\n  name: string = 'Sami'\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./repository-container-component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex-col\">\n  <div>\n    <elix-repository-top-one></elix-repository-top-one>\n  </div>\n  <div>\n    <elix-repository-tab-project></elix-repository-tab-project>\n  </div>\n</div>\n"
        },
        {
            "name": "RepositoryTabProjectComponent",
            "id": "component-RepositoryTabProjectComponent-df40c75efa8fb3d9df415d5d2fb12b69",
            "file": "src/app/module/repository-container/repository-tab-project/repository-tab-project.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-repository-tab-project",
            "styleUrls": [
                "./repository-tab-project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./repository-tab-project.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "routes",
                    "defaultValue": "[{name: '', path: ''}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n  selector: 'elix-repository-tab-project',\n  templateUrl: './repository-tab-project.component.html',\n  styleUrls: ['./repository-tab-project.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RepositoryTabProjectComponent implements OnInit {\n  routes: [{ name: string, path: string }] = [{name: '', path: ''}]\n\n  constructor(private _router: ActivatedRoute) {\n  }\n\n  handleClick(event: string) {\n    return event\n  }\n\n  ngOnInit(): void {\n    this.routes = this._router.snapshot.data.data.router\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "elix-repository-tab-project {\n  .mat-tab-list.mat-tab-nav-bar {\n    color: white;\n    padding-bottom: 2px;\n\n  }\n\n  .vorkurt__margin {\n    a {\n      .mat-tab-list {\n        padding-top: 5px;\n      }\n\n      .mat-tab-links {\n        margin-top: -2px;\n        margin-left: 5px;\n        margin-right: 5px;\n      }\n    }\n\n    a.active1 {\n      border-right: 1px;\n      border-left: 1px;\n      border: solid #1ea7fd;\n      border-bottom: none;\n      background: #22272e;\n      border-top-left-radius: 5px;\n      border-top-right-radius: 5px;\n\n      .mat-tab-links {\n        margin-top: -6px;\n        margin-left: 5px;\n        margin-right: 5px;\n        height: 22px;\n      }\n\n    }\n  }\n\n  .mat-tab-nav-bar {\n    color: white;\n  }\n\n  .forkurt__border {\n    border-bottom: 1px solid #1ea7fd\n  }\n\n  .vorkurt__margin {\n    margin-bottom: -1px;\n  }\n}\n",
                    "styleUrl": "./repository-tab-project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex forkurt__border\" cdkDrag>\n  <nav class=\"flex flex-1 vorkurt__margin-nav\">\n    <div *ngFor=\"let route of routes\" class=\"vorkurt__margin\">\n      <a mat-tab-nav-bar\n         class=\"flex flex-row\"\n         [routerLink]=\"route.path\"\n         routerLinkActive=\"active1\"\n         (click)=\"handleClick(route.name)\"\n\n      >{{route.name}}\n      </a>\n    </div>\n  </nav>\n  <div class=\"flex flex-wrap\">\n    sda\n  </div>\n</div>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "RepositoryTopOneComponent",
            "id": "component-RepositoryTopOneComponent-0b16fa803d48ab5c5ca8f1739d1544db",
            "file": "src/app/module/repository-container/repository-top-one/repository-top-one.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-repository-top-one",
            "styleUrls": [
                "./repository-top-one.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./repository-top-one.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'elix-repository-top-one',\n  templateUrl: './repository-top-one.component.html',\n  styleUrls: ['./repository-top-one.component.sass']\n})\nexport class RepositoryTopOneComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".iufce__container\n  background: #525b65\n  width: 200px\n  border-radius: 8px\n",
                    "styleUrl": "./repository-top-one.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex\">\n  <div class=\"flex-1\">\n    <div class=\"flex\">\n      <mat-icon [svgIcon]=\"'fa_solid:book'\" class=\"iufce__text-color\"></mat-icon>\n      <h2 class=\"iufce__text-color\">NsdHSO/ iufce</h2>\n    </div>\n  </div>\n  <div class=\"iufce__container flex items-center \">\n    <div class=\"flex-1\">\n      <h1 class=\"iufce__text-color\">\n        s\n      </h1>\n    </div>\n    <div>\n      <h1 class=\"iufce__text-color\">\n        s\n      </h1>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-bf2275ca409084b0efbad127f3909354",
            "file": "src/app/shared/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "template": "<div *ngIf=\"showSppiner\" class=\"lds-hourglass flex justify-center items-center\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_showSppiner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SpinnerStateService} from \"./spinner-state.service\";\nimport {tap} from \"rxjs/operators\";\n\n@Component({\n  selector: 'elix-spinner',\n  template: '<div *ngIf=\"showSppiner\" class=\"lds-hourglass flex justify-center items-center\"></div>',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent implements OnInit {\n  private _showSppiner: boolean\n\n  constructor(private _spinnerStateService: SpinnerStateService) {\n  }\n\n\n  get showSppiner(): boolean {\n    return this._showSppiner\n  }\n\n  ngOnInit(): void {\n    this._spinnerStateService.getState$\n      .pipe(tap((res) => console.log(res)))\n      .subscribe(resp => this._showSppiner = resp)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lds-hourglass {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n.lds-hourglass:after {\n  content: \" \";\n  display: block;\n  border-radius: 50%;\n  width: 0;\n  height: 0;\n  margin: 8px;\n  box-sizing: border-box;\n  border: 32px solid #fff;\n  border-color: #9d8b6f transparent #5a9469 transparent;\n  animation: lds-hourglass 3.2s infinite;\n}\n@keyframes lds-hourglass {\n  0% {\n    transform: rotate(0);\n    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n  }\n  50% {\n    transform: rotate(900deg);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n  100% {\n    transform: rotate(3600deg);\n  }\n}\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_spinnerStateService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_spinnerStateService",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "showSppiner": {
                    "name": "showSppiner",
                    "getSignature": {
                        "name": "showSppiner",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 17
                    }
                }
            }
        },
        {
            "name": "TableRepositoryComponent",
            "id": "component-TableRepositoryComponent-d570fa2838d0ea746f92283e64d6d3c0",
            "file": "src/app/module/repository-container/table-repository/table-repository.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "elix-table-repository",
            "styleUrls": [
                "./table-repository.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-repository.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "paginationSize",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "rowData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnDefs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "defaultColDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gridApi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridApi",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "gridOption",
                    "defaultValue": "<GridOptions>{\n    getContextMenuItems: this.getContextMenuItems\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pivotPanelShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "rowGroupPanelShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "sideBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "spinnerState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "unSubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getContextMenuItems",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGridReady",
                    "args": [
                        {
                            "name": "event",
                            "type": "GridReadyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GridReadyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {DataTableService} from \"../../../shared/utils/services/data-table/data-table.service\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {GridApi, GridOptions, GridReadyEvent} from \"ag-grid-community\";\nimport {SpinnerStateService} from \"../../../shared/spinner/spinner-state.service\";\nimport {TestBed} from \"@angular/core/testing\";\n\n@Component({\n  selector: 'elix-table-repository',\n  templateUrl: './table-repository.component.html',\n  styleUrls: ['./table-repository.component.scss']\n})\nexport class TableRepositoryComponent implements OnInit, OnDestroy {\n  spinnerState: boolean = false\n  columnDefs: any\n  defaultColDef: any;\n  sideBar: any\n  rowGroupPanelShow: any\n  pivotPanelShow: any\n  @Input()\n  rowData: []\n  gridApi: GridApi\n  @Input()\n  paginationSize = 20\n  gridOption = <GridOptions>{\n    getContextMenuItems: this.getContextMenuItems\n  }\n  private unSubscribe$: Subject<void> = new Subject<void>()\n\n  constructor(private _dataStore: DataTableService, private _spinnerState: SpinnerStateService) {\n    this._spinnerState.setStateBehaviorSpinner(true)\n    this.columnDefs = [\n      {\n        headerName: \"Group 1\",\n        children: [\n          {field: \"athlete\", headerName: 'Athlete', rowGroup: true},\n          {field: 'gold'},\n          {field: 'sport'}\n        ]\n      },\n      {\n        headerName: \"Group 2\",\n        children: [\n          {field: 'date', rowGroup: true},\n        ]\n      },\n      {field: \"country\"}\n    ]\n    this.defaultColDef = {\n      sortable: true,\n      resize: true,\n      width: 'auto',\n      enableRowGroup: true,\n      enablePivot: true,\n      enableValue: true,\n      animateRows: true,\n      rowMultiSelectWithClick: true,\n      rowSelection: 'multiple',\n    }\n    this.sideBar = {toolPanels: ['columns']}\n    this.rowGroupPanelShow = 'always'\n    this.pivotPanelShow = \"always\"\n  }\n\n  ngOnInit(): void {\n    this._dataStore.dataStore$\n      .pipe(takeUntil(this.unSubscribe$))\n      .subscribe(resp => {\n          this.rowData = resp\n          this._spinnerState.setStateBehaviorSpinner(false)\n        }\n      )\n    this._spinnerState.getState$.subscribe(resp => this.spinnerState = resp)\n\n  }\n\n  onPageChange(event: any) {\n    this.gridApi.paginationSetPageSize(Number(this.paginationSize))\n    this._spinnerState.setStateBehaviorSpinner(true)\n    setTimeout(() => this._spinnerState.setStateBehaviorSpinner(false), 3000)\n  }\n\n  onGridReady(event: GridReadyEvent) {\n    this.gridApi = event.api\n  }\n\n  getContextMenuItems(params: any) {\n    let result = [\n      {\n        name: 'Alert ' + params.value,\n        action: function () {\n          window.alert('Alerting about ' + params.value)\n        }\n      }\n    ]\n    return result\n  }\n\n  ngOnDestroy() {\n    this.unSubscribe$.next();\n    this.unSubscribe$.complete()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-repository.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dataStore",
                        "type": "DataTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_spinnerState",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_dataStore",
                        "type": "DataTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_spinnerState",
                        "type": "SpinnerStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\n<select (change)=\"onPageChange($event)\">\n  <option value=\"20\">20</option>\n  <option value=\"50\">50</option>\n  <option value=\"100\">100</option>\n  <option value=\"250\">250</option>\n  <option value=\"500\">500</option>\n</select>\n\n<elix-spinner *ngIf=\"spinnerState\"></elix-spinner>\n<ag-grid-angular\n  *ngIf=\"!spinnerState\"\n  #agGrid\n  style=\"width: 100%; height: 30rem;\"\n  id=\"myGrid\"\n  class=\"ag-theme-alpine\"\n  [rowData]=\"rowData\"\n  [columnDefs]=\"columnDefs\"\n  [defaultColDef]=\"defaultColDef\"\n  [pagination]=\"true\"\n  [paginationPageSize]=\"paginationSize\"\n  (gridReady)=\"onGridReady($event)\"\n  [gridOptions]=\"gridOption\"\n></ag-grid-angular>\n<router-outlet></router-outlet>\n\n"
        }
    ],
    "modules": [
        {
            "name": "AppHeaderRouting",
            "id": "module-AppHeaderRouting-d628fbfd6f62c95f3e00520ed1db10d0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/module/header/header.routing.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {HeaderComponent} from \"./header.component\";\nimport {routerArray} from \"../../config/global/config-router\";\nimport {AuthGuardGuard} from \"../../shared/utils/services\";\n\n\nconst routes: Routes = [\n  {\n    path: '', component: HeaderComponent,\n    children: [\n      {\n        path: \":id\",\n        canActivate: [AuthGuardGuard],\n        data: {data: routerArray},\n        loadChildren: () => \"import('../repository-container/repository-container.module').then(m => m.RepositoryContainerModule)\",\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppHeaderRouting {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-095d9381142f71cc8d05435c41ca9fea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {FormsModule} from \"@angular/forms\";\nimport {RepositoryContainerModule} from \"./module/repository-container/repository-container.module\";\nimport {CoreModule} from \"../@core/core/core.module\";\nimport {AgGridModule} from \"ag-grid-angular\";\nimport {SharedModule} from \"./shared/shared.module\";\nimport {firebaseConfig} from \"./config/auth/firebase\";\nimport {AngularFireModule} from \"@angular/fire/compat\";\nimport {AngularFireDatabaseModule} from \"@angular/fire/compat/database\";\nimport { AuthComponent } from './auth/auth.component';\nimport {MatRippleModule} from \"@angular/material/core\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AuthComponent,\n  ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        MatIconModule,\n        AngularFireModule.initializeApp(firebaseConfig),\n        AngularFireDatabaseModule,\n        FormsModule,\n        RepositoryContainerModule,\n        CoreModule,\n        AgGridModule.withComponents([]),\n        SharedModule,\n        MatRippleModule\n    ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AuthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "RepositoryContainerModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-84f39e1786e5c63a628b1609b685b5fb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {AgGridModule} from \"ag-grid-angular\";\nimport {AuthComponent} from \"./auth/auth.component\";\nimport {AuthGuardGuard} from \"./shared/utils/services\";\n\nconst routes: Routes = [\n  {path: '', redirectTo: '/auth/test', pathMatch: 'full'},\n  {\n    path: '',\n    canActivate: [AuthGuardGuard],\n    loadChildren: () => \"import('./module/header/header.module').then(m => m.HeaderModule)\",\n  },\n  {\n    path: 'auth/test',\n    component: AuthComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes),\n    AgGridModule.withComponents([])\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-3afb7b8302b7326f90a1bc2a3748331f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/@core/core/core.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {MatIconRegistry} from \"@angular/material/icon\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {HttpClientModule} from \"@angular/common/http\";\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [],\n})\nexport class CoreModule {\n  constructor(\n    private _domSanitizer: DomSanitizer,\n    private _matIconRegistry: MatIconRegistry,\n  ) {\n    this._matIconRegistry.addSvgIconSetInNamespace(\n      \"fa_brands\",\n      this._domSanitizer.bypassSecurityTrustResourceUrl(\"assets/icons/svgs/brands.svg\")\n    );\n    this._matIconRegistry.addSvgIconSetInNamespace(\n      \"fa_regular\",\n      this._domSanitizer.bypassSecurityTrustResourceUrl(\"assets/icons/svgs/regular.svg\")\n    );\n    this._matIconRegistry.addSvgIconSetInNamespace(\n      \"fa_solid\",\n      this._domSanitizer.bypassSecurityTrustResourceUrl(\"assets/icons/svgs/solid.svg\")\n    );\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "id": "module-HeaderModule-e18d7d47806abd7c702a31acd6e8ea9b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/module/header/header.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AppHeaderRouting} from \"./header.routing\";\nimport {HeaderComponent} from \"./header.component\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {FormsModule} from \"@angular/forms\";\nimport { PopUpLoginComponent } from './pop-up-login/pop-up-login.component';\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\n\n\n@NgModule({\n  declarations: [\n    HeaderComponent,\n    PopUpLoginComponent\n  ],\n  imports: [\n    OverlayModule,\n    MatIconModule,\n    FormsModule,\n    CommonModule,\n    AppHeaderRouting,\n    DragDropModule,\n    SharedModule,\n    MatButtonModule,\n    MatTooltipModule\n  ]\n})\nexport class HeaderModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "PopUpLoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppHeaderRouting"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RepositoryContainerModule",
            "id": "module-RepositoryContainerModule-6ad312506cc68a99e3b1883c3c3d2b81",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/module/repository-container/repository-container.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RepositoryTopOneComponent} from './repository-top-one/repository-top-one.component';\nimport {RepositoryTabProjectComponent} from './repository-tab-project/repository-tab-project.component';\nimport {RepositoryContainerComponent} from \"./repository-container.component\";\nimport {RepositoryRoutingModule} from \"./repository-routing.module\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {TableRepositoryComponent} from './table-repository/table-repository.component';\nimport 'ag-grid-enterprise'\nimport {AgGridModule} from \"ag-grid-angular\";\nimport {AppModule} from \"../../app.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\n\n@NgModule({\n  declarations: [\n    RepositoryTopOneComponent,\n    RepositoryTabProjectComponent,\n    RepositoryContainerComponent,\n    TableRepositoryComponent\n  ],\n    imports: [\n      DragDropModule,\n        MatTabsModule,\n        CommonModule,\n        RepositoryRoutingModule,\n        MatIconModule,\n        AgGridModule.withComponents([]),\n      SharedModule\n    ]\n})\nexport class RepositoryContainerModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RepositoryContainerComponent"
                        },
                        {
                            "name": "RepositoryTabProjectComponent"
                        },
                        {
                            "name": "RepositoryTopOneComponent"
                        },
                        {
                            "name": "TableRepositoryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RepositoryRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RepositoryRoutingModule",
            "id": "module-RepositoryRoutingModule-6ad32db47c9cde5bbfb354fdf2256417",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/module/repository-container/repository-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {RepositoryContainerComponent} from \"./repository-container.component\";\nimport {TableRepositoryComponent} from \"./table-repository/table-repository.component\";\nimport {TableDataResolver} from \"../../shared/utils/services/resolvers/table/table-data.resolver\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RepositoryContainerComponent,\n    children: [{\n      path: '',\n      component: TableRepositoryComponent,\n      resolve: {table: TableDataResolver}\n    }]\n  },\n  // {\n  //   path: '**',\n  //   redirectTo: '',\n  //   component: RepositoryContainerComponent\n  // }\n\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RepositoryRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-a44a646f76171bc80c8c56f4f1032fd0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SpinnerComponent} from \"./spinner/spinner.component\";\nimport { ElixDragDirective } from './utils/directive/elix-drag.directive';\n\n@NgModule({\n  declarations: [SpinnerComponent, ElixDragDirective],\n  imports: [\n    CommonModule\n  ],\n    exports: [SpinnerComponent, ElixDragDirective]\n})\nexport class SharedModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ElixDragDirective"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ElixDragDirective"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "firebaseConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/auth/firebase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiKey: \"AIzaSyA6YpwfAmlLH4o6B1NQQeQ1uoHYnJoOvHs\",\n  authDomain: \"vorkurt.firebaseapp.com\",\n  databaseURL: \"https://vorkurt-default-rtdb.firebaseio.com\",\n  projectId: \"vorkurt\",\n  storageBucket: \"vorkurt.appspot.com\",\n  messagingSenderId: \"1044413194434\",\n  appId: \"1:1044413194434:web:4667694345fbde0e6adb5b\",\n  measurementId: \"G-49RDGK301M\"\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "routerArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/global/config-router.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.freeze({\n  router: [\n    {\n      name: 'Pull Request',\n      path: '/pull_request'\n    } as { name: string, path: string },\n    {\n      name: 'Code',\n      path: '/code'\n    } as { name: string, path: string }, {\n      name: 'Settings',\n      path: '/settings'\n    } as { name: string, path: string }\n  ]\n})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header-cusotm.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => (\n  {\n    props: args,\n    template: `<elix-header></elix-header>\n    <router-outlet></router-outlet>\n`\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Table-demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableRepositoryComponent>",
                "defaultValue": "(args: TableRepositoryComponent) => (\n  {\n    ...args,\n    rowData: args.rowData,\n    template: `<elix-table-repository></elix-table-repository>\n                <router-outlet></router-outlet>\n`\n  })"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/app/config/auth/firebase.ts": [
                {
                    "name": "firebaseConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/auth/firebase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiKey: \"AIzaSyA6YpwfAmlLH4o6B1NQQeQ1uoHYnJoOvHs\",\n  authDomain: \"vorkurt.firebaseapp.com\",\n  databaseURL: \"https://vorkurt-default-rtdb.firebaseio.com\",\n  projectId: \"vorkurt\",\n  storageBucket: \"vorkurt.appspot.com\",\n  messagingSenderId: \"1044413194434\",\n  appId: \"1:1044413194434:web:4667694345fbde0e6adb5b\",\n  measurementId: \"G-49RDGK301M\"\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/app/config/global/config-router.ts": [
                {
                    "name": "routerArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/global/config-router.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.freeze({\n  router: [\n    {\n      name: 'Pull Request',\n      path: '/pull_request'\n    } as { name: string, path: string },\n    {\n      name: 'Code',\n      path: '/code'\n    } as { name: string, path: string }, {\n      name: 'Settings',\n      path: '/settings'\n    } as { name: string, path: string }\n  ]\n})"
                }
            ],
            "src/stories/Header-cusotm.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header-cusotm.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => (\n  {\n    props: args,\n    template: `<elix-header></elix-header>\n    <router-outlet></router-outlet>\n`\n  })"
                }
            ],
            "src/stories/Table-demo.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Table-demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableRepositoryComponent>",
                    "defaultValue": "(args: TableRepositoryComponent) => (\n  {\n    ...args,\n    rowData: args.rowData,\n    template: `<elix-table-repository></elix-table-repository>\n                <router-outlet></router-outlet>\n`\n  })"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/auth/test",
                        "pathMatch": "full"
                    },
                    {
                        "path": "",
                        "canActivate": [
                            "AuthGuardGuard"
                        ],
                        "loadChildren": "./module/header/header.module#HeaderModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/module/header/header.routing.ts",
                                        "module": "AppHeaderRouting",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HeaderComponent",
                                                "children": [
                                                    {
                                                        "path": ":id",
                                                        "canActivate": [
                                                            "AuthGuardGuard"
                                                        ],
                                                        "data": {
                                                            "data": "routerArray"
                                                        },
                                                        "loadChildren": "../repository-container/repository-container.module#RepositoryContainerModule"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HeaderModule"
                            }
                        ]
                    },
                    {
                        "path": "auth/test",
                        "component": "AuthComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/module/repository-container/repository-routing.module.ts",
                "module": "RepositoryRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "RepositoryContainerComponent",
                        "children": [
                            {
                                "path": "",
                                "component": "TableRepositoryComponent",
                                "resolve": {
                                    "table": "TableDataResolver"
                                }
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/config/auth/firebase.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/global/config-router.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routerArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/module/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/module/header/pop-up-login/pop-up-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopUpLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopUpStateService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOffsetPopUp",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/module/repository-container/repository-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RepositoryContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/module/repository-container/repository-tab-project/repository-tab-project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RepositoryTabProjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/module/repository-container/repository-top-one/repository-top-one.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RepositoryTopOneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/module/repository-container/table-repository/table-repository.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableRepositoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerStateService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/directive/elix-drag.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ElixDragDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthInfoResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthInfoUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/interfaces/data-table.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataTable",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/interfaces/user/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/data-table/data-table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataTableService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/firebase/connection.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConnectionService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/guards/auth-guard.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/resolvers/table/table-data.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "TableDataResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/user/user-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header-cusotm.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Table-demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}